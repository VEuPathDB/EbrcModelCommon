<?xml version="1.0" encoding="UTF-8"?>
<tuningConfig>

  <!-- EDA table -->	
  <tuningTable name="StudyIdDatasetId" prefixEnabled="false">
    <comment>EDA Study ID, Dataset presenter ID (hash)
    </comment>
    <internalDependency name="DatasetPresenter"/>
    <externalDependency name="sres.ExternalDatabase"/>
    <externalDependency name="sres.ExternalDatabaseRelease"/>
    <externalDependency name="eda.Study"/>
    <sql>
      <![CDATA[
        CREATE TABLE StudyIdDatasetId&1 AS
        SELECT s.STABLE_ID STUDY_STABLE_ID, dp.DATASET_PRESENTER_ID DATASET_ID, dp.SHORT_DISPLAY_NAME AS DATASET_SHORT_DISPLAY_NAME
        FROM EDA.STUDY s
          LEFT JOIN sres.EXTERNALDATABASERELEASE e ON s.EXTERNAL_DATABASE_RELEASE_ID =e.EXTERNAL_DATABASE_RELEASE_ID
          LEFT JOIN sres.EXTERNALDATABASE e2 ON e.EXTERNAL_DATABASE_ID =e2.EXTERNAL_DATABASE_ID
          LEFT JOIN DatasetPresenter dp on e2.name=dp.name
        -- This is TEMPORARY (used for alpha MapVEU Application)
        UNION
        select case
            when d.dataset_presenter_id = 'DS_480c976ef9' then 'VBP_MEGA'
            when d.dataset_presenter_id = 'DS_e18287e335' then '2023-maine-ricinus'
            when d.dataset_presenter_id = 'DS_2b98dd44ab' then '2010-Neafsey-M-S-Bamako'
          else 'NA' end as study_stable_id,
          d.dataset_presenter_id as dataset_id, d.short_display_name as dataset_short_display_name
        from DatasetPresenter d
        where d.dataset_presenter_id in (
          'DS_480c976ef9',
          'DS_e18287e335'
        )
      ]]>
    </sql>
  </tuningTable>

  <tuningTable name="ExternalSequenceTaxonRank" prefixEnabled="false">
    <comment>Taxon ranks for sequences
    </comment>
    <externalDependency name="apidb.TaxonString"/>
    <externalDependency name="dots.ExternalNaSequence"/>
    <externalDependency name="sres.TaxonName"/>
    <externalDependency name="sres.Taxon"/>
    <sql>
      <![CDATA[
        CREATE TABLE ExternalSequenceTaxonRank&1 AS
        WITH organism_rank AS (
          SELECT tn1.taxon_id as organism, tn2.name as parent_organism,
                 tn2.taxon_id as parent_organism_id, r.rank
          FROM sres.TaxonName tn1, sres.TaxonName tn2,
                (
                  WITH RECURSIVE cte AS (
                    SELECT taxon_id as input, taxon_id, rank, parent_id
                    FROM sres.taxon
                    WHERE taxon_id IN (
                        SELECT taxon_id FROM dots.externalaasequence
                        UNION
                        SELECT taxon_id FROM apidb.taxonstring
                    )
                    UNION
                    SELECT cte.input, t.taxon_id, t.rank, t.parent_id
                    FROM sres.taxon t, cte
                    WHERE cte.parent_id = t.taxon_id
                  )
                  SELECT input, taxon_id, rank
                  FROM cte
                ) r
          WHERE r.input = tn1.taxon_id
           and r.taxon_id = tn2.taxon_id
           and tn1.name_class = 'scientific name'
           and tn2.name_class = 'scientific name'
           and r.rank in ('phylum', 'family','genus', 'species', 'superkingdom','kingdom', 'class', 'order')
        )
        SELECT organisms.organism,
               coalesce(superkingdom.parent_organism, 'N/A') as superkingdom,
               superkingdom.parent_organism_id as superkingdom_id,
               coalesce(kingdom.parent_organism, 'N/A') as kingdom,
               kingdom.parent_organism_id as kingdom_id,
               coalesce (phylum.parent_organism, 'N/A') as phylum,
               phylum.parent_organism_id as phylum_id,
               coalesce (class.parent_organism, 'N/A') as class,
               class.parent_organism_id as class_id,
               coalesce (family.parent_organism, 'N/A') as family,
               family.parent_organism_id as family_id,
               coalesce (rank_order.parent_organism, 'N/A') as rank_order,
               rank_order.parent_organism_id as rank_order_id,
               coalesce ( genus.parent_organism, 'N/A') as genus,
               genus.parent_organism_id as genus_id,
               coalesce(species.parent_organism, 'N/A') as species,
               species.parent_organism_id as species_id
        FROM (SELECT DISTINCT organism FROM organism_rank) organisms
             LEFT JOIN (SELECT * FROM organism_rank WHERE rank= 'phylum') phylum ON  organisms.organism = phylum.organism
             LEFT JOIN (SELECT * FROM organism_rank WHERE rank= 'genus') genus ON  organisms.organism = genus.organism
             LEFT JOIN (SELECT * FROM organism_rank WHERE rank= 'species') species ON  organisms.organism = species.organism
             LEFT JOIN (SELECT * FROM organism_rank WHERE rank= 'kingdom') kingdom ON  organisms.organism = kingdom.organism
             LEFT JOIN (SELECT * FROM organism_rank WHERE rank= 'superkingdom') superkingdom ON  organisms.organism = superkingdom.organism
             LEFT JOIN (SELECT * FROM organism_rank WHERE rank= 'class') class ON  organisms.organism = class.organism
             LEFT JOIN (SELECT * FROM organism_rank WHERE rank= 'family') family ON  organisms.organism = family.organism
             LEFT JOIN (SELECT * FROM organism_rank WHERE rank= 'order') rank_order ON organisms.organism = rank_order.organism
        ORDER BY organism, species, genus
       ]]>
    </sql>
  </tuningTable>

<!-- CHECK AND FIX - regexp_count issue
  <tuningTable name="TaxonAbundance" prefixEnabled="false">
    <comment>lineage abundances</comment>
    <externalDependency name="results.LineageAbundance"/>
    <externalDependency name="sres.ExternalDatabase"/>
    <externalDependency name="sres.ExternalDatabaseRelease"/>
    <externalDependency name="study.ProtocolAppNode"/>
    <externalDependency name="study.StudyLink"/>
    <externalDependency name="study.Study"/>
    <sql>
      <![CDATA[
       CREATE TABLE TaxonAbundance&1 AS
       WITH abundance as (
         select la.protocol_app_node_id,
         'Kingdom' as category,
         1 as taxon_level,
         regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\1') as term,
         la.raw_count,
         la.relative_abundance
         from results.LineageAbundance la
       UNION
         select la.protocol_app_node_id,
         'Phylum' as category,
         2 as taxon_level,
         regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\2') as term,
         la.raw_count,
         la.relative_abundance
         from results.LineageAbundance la
         where REGEXP_COUNT(la.lineage, ';') >= 1
       UNION
         select la.protocol_app_node_id,
         'Class' as category,
         3 as taxon_level,
         regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\3') as term,
         la.raw_count,
         la.relative_abundance
         from results.LineageAbundance la
         where REGEXP_COUNT(la.lineage, ';') >= 2
       UNION
         select la.protocol_app_node_id,
         'Order' as category,
         4 as taxon_level,
         regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\4') as term,
         la.raw_count,
         la.relative_abundance
         from results.LineageAbundance la
         where REGEXP_COUNT(la.lineage, ';') >= 3
       UNION
         select la.protocol_app_node_id,
         'Family' as category,
         5 as taxon_level,
         regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\5') as term,
         la.raw_count,
         la.relative_abundance
         from results.LineageAbundance la
         where REGEXP_COUNT(la.lineage, ';') >= 4
       UNION
         select la.protocol_app_node_id,
         'Genus' as category,
         6 as taxon_level,
         regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\6') as term,
         la.raw_count,
         la.relative_abundance
         from results.LineageAbundance la
         where REGEXP_COUNT(la.lineage, ';') >= 5
       UNION
         select la.protocol_app_node_id,
         'Species' as category,
         7 as taxon_level,
         regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\7') as term,
         la.raw_count,
         la.relative_abundance
         from results.LineageAbundance la
         where REGEXP_COUNT(la.lineage, ';') = 6
       )
       SELECT  
         abundance.protocol_app_node_id,
         abundance.category,
         abundance.taxon_level,
         abundance.term,
         sum(abundance.raw_count) as agg_count,
         sum(abundance.relative_abundance) as value,
         pan.name AS pan_name,
         ed.name AS dataset_name
       FROM
         abundance,
         study.ProtocolAppNode pan,
         study.StudyLink sl,
         study.Study ss,
         sres.ExternalDatabaseRelease edr,
         sres.ExternalDatabase ed
       WHERE abundance.protocol_app_node_id = pan.protocol_app_node_id
        AND pan.protocol_app_node_id = sl.protocol_app_node_id
        AND sl.study_id = ss.study_id
        AND ss.name not like 'OTU Profiles%'
        AND ss.external_database_release_id = edr.external_database_release_id
        AND edr.external_database_id = ed.external_database_id
        AND ed.name like 'otu%_RSRC'
       GROUP BY (abundance.protocol_app_node_id, abundance.category, abundance.taxon_level, abundance.term, pan.name, ed.name)
       ORDER BY dataset_name, pan_name
      ]]>
    </sql>
    <sql>
      <![CDATA[
        CREATE UNIQUE INDEX TaxAbund_panId_Term&1
          ON TaxonAbundance&1 (protocol_app_node_id, category, term)

      ]]>
    </sql>
  </tuningTable>
-->

  <tuningTable name="ProjectTaxon" prefixEnabled="true">
    <comment>map taxon names onto project_ids. to be used by the apidb.project_id function</comment>
    <externalDependency name="dots.ExternalNaSequence"/>
    <externalDependency name="sres.TaxonName"/>
    <externalDependency name="core.ProjectInfo"/>
    <externalDependency name="apidb.Organism"/>
    <sql>
      <![CDATA[
        CREATE TABLE &prefixProjectTaxon&1 AS
        WITH
            local_taxon -- a taxon found in this instance, either in dots.ExternalNaSequence or in apidb.Organism
                AS (  SELECT distinct tn.name as taxon,
                          substr((tn.name), 1, position(' ' IN tn.name||' ') - 1) as first_word,
                          pi.name as project_id
                      FROM dots.ExternalNaSequence ens, sres.TaxonName tn, core.ProjectInfo pi
                      WHERE ens.taxon_id = tn.taxon_id
                              and ((tn.name not like 'Bodo %' and tn.name not like 'Drosophila %')
                                    OR tn.name_class = 'scientific name')
                              and ens.row_project_id = pi.project_id
                          -- get names from apidb.Organism.family_name_for_files
                          --   (may not be necessary)
                      UNION
                      SELECT family_name_for_files as taxon,
                          substr((family_name_for_files), 1, position(' ' IN family_name_for_files||' ') - 1) as first_word,
                          project_name as project_id
                      FROM apidb.Organism
                      WHERE family_name_for_files in (select name from sres.TaxonName)
            ),
            mononym -- a taxon name that's the first word of a local taxon
                AS (SELECT distinct lower(lt.first_word) as taxon, lt.project_id
                    FROM local_taxon lt, sres.TaxonName tn
                    WHERE lt.first_word = tn.name
                          -- and tn.name_class = 'scientific name'
                    ),
            full_name -- the full name of a local taxon whose first name is not a taxon
                AS (SELECT distinct lower(lt.taxon) as taxon, lt.project_id
                    FROM local_taxon lt, sres.TaxonName tn
                    WHERE lt.taxon = tn.name
                            -- and tn.name_class = 'scientific name'
                            and lower(lt.first_word) not in (select taxon from mononym))
        SELECT * FROM mononym
        UNION
        SELECT * FROM full_name
        UNION
        SELECT 'hypocrea', 'FungiDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/afsm11', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/afsm2', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/amopi', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/asl1', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/de11d', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/de4a', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/frs/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/gd-d1-1', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/gd-d1-2', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/gd-d1-3', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/gillnor1/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/gillnor2/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/gillrich3/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/lithon', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/net12afl/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/netc1/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/netc2/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/neth2t3/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/np251002/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/nrss/ii', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/pal2', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/pao27/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/rp', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/sed5a/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/sedc1/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/sedcb1/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/sedct1/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/sedmh1/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/sedst1/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/sm53', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/sm68', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/st4n', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/st8v/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/su03', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/su4', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/tg1162', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/tg1267', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/tun1/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/wt2708/i', 'TriTrypDB'
        UNION
        SELECT 'perkinsiella-like_sp._plo/wtuts/i', 'TriTrypDB'
        UNION
        SELECT 'plo_of_paramoeba_invadens_ags-2013', 'TriTrypDB'
        UNION
        SELECT 'soil_flagellate_and31', 'TriTrypDB'
        UNION
        SELECT 'kinetoplastid_flagellate_lfs2', 'TriTrypDB'
        UNION
        SELECT 'cryptaulaxoides-like_sp._tcs-2003', 'TriTrypDB'
        ORDER BY 2, 1
      ]]>
    </sql>
    <sql>
      <![CDATA[
        update &prefixProjectTaxon&1
        set taxon = replace(taxon, '''', '')
        where taxon like '%''%'
      ]]>
    </sql>
    <sql>
      <![CDATA[
        create unique index data_load_prjct_err&1 on &prefixProjectTaxon&1 (taxon)
      ]]>
    </sql>
    <sql>
      <![CDATA[
        create unique index projtax_ix&1 on &prefixProjectTaxon&1 (taxon, project_id)
      ]]>
    </sql>
  </tuningTable>

  <tuningTable name="SequencePieceClosure" prefixEnabled="true">
    <comment>Extends dots.SequencePiece to handle multiple levels. Used in
         sequence-record queries and in other tuning tables, including
         GenomicSeqAttributes, and SimilaritySpanLocation
     </comment>
    <externalDependency name="dots.SequencePiece"/>
    <sql>
      <![CDATA[
        CREATE TABLE &prefixSequencePieceClosure&1 AS
        SELECT sp.sequence_piece_id,
            sp.virtual_na_sequence_id,
            sp.piece_na_sequence_id,
            sp.sequence_order,
            sp.distance_from_left,
            sp.uncertainty,
            sp.strand_orientation,
            sp.start_position,
            sp.end_position,
            sp.modification_date,
            1 AS edge_level
        FROM dots.SequencePiece sp, dots.NaSequence ns
        WHERE sp.piece_na_sequence_id = ns.na_sequence_id
              AND (ns.taxon_id::varchar = '&filterValue' OR length('&filterValue') = 0)
      ]]>
    </sql>
    <sql>
      <![CDATA[
        /* known issue: this should be run not just once, but iteratively
           until it doesn't create new records.  Currently (7/2008),
           SequencePieces aren't nested even once. */
        INSERT INTO &prefixSequencePieceClosure&1
                    (edge_level, virtual_na_sequence_id, piece_na_sequence_id,
                     distance_from_left, strand_orientation, modification_date, 
                     start_position, end_position, sequence_order, sequence_piece_id)
        SELECT 2, higher.virtual_na_sequence_id, lower.piece_na_sequence_id,
               higher.distance_from_left,
               case
                 when coalesce(higher.strand_orientation, '+') = coalesce(lower.strand_orientation, '+')
                 then '+'
                 else '-'
               end as strand_orientation,
               now(),
               higher.start_position - lower.distance_from_left, 
               higher.end_position - lower.distance_from_left, 
               higher.sequence_order,
               nextval('dots.sequencepiece_sq')
        FROM &prefixSequencePieceClosure&1 higher, &prefixSequencePieceClosure&1 lower
        WHERE higher.piece_na_sequence_id = lower.virtual_na_sequence_id
         AND higher.start_position >= lower.start_position + lower.distance_from_left
         AND higher.end_position <= lower.end_position + lower.distance_from_left
      ]]>
    </sql>
  </tuningTable>

  <tuningTable name="GenomicSeqAttributes" prefixEnabled="true">
    <comment>Each row represents one genomic sequence for which a WDK sequence
         record can be instantiated. Used widely in the workflow, the model,
         and GBrowse, as well as in the creation of a dozen or so other tuning
         tables.
    </comment>
    <internalDependency name="ProjectTaxon"/>
    <internalDependency name="SequencePieceClosure"/>
    <externalDependency name="apidb.Synteny"/>
    <externalDependency name="apidb.Organism"/>
    <externalDependency name="dots.DbRefNaSequence"/>
    <externalDependency name="dots.ExternalNaSequence"/>
    <externalDependency name="sres.DbRef"/>
    <externalDependency name="sres.ExternalDatabase"/>
    <externalDependency name="sres.ExternalDatabaseRelease"/>
    <externalDependency name="sres.OntologyTerm"/>
    <externalDependency name="sres.Taxon"/>
    <externalDependency name="sres.TaxonName"/>
    <sql>
      <![CDATA[
        CREATE TABLE &prefixGenomicSeqAttributes&1 AS
        SELECT
               cast(apidb.prefixed_project_id(tn.name, '&prefix') as varchar(20)) as project_id,
               SUBSTR(sequence.source_id, 1, 60) AS source_id, sequence.a_count,
               sequence.c_count, sequence.g_count, sequence.t_count,
               (sequence.length
                - (sequence.a_count + sequence.c_count + sequence.g_count + sequence.t_count))
                 AS other_count,
               sequence.length,
               to_char((sequence.a_count + sequence.t_count) / sequence.length * 100, '99.99')
                 AS at_percent,
               SUBSTR(tn.name, 1, 100) AS organism,
               taxon.ncbi_tax_id,
               taxon.taxon_id,
               CASE WHEN sequence.description IS NULL  THEN SUBSTR(tn.name, 1, 100)
                    ELSE SUBSTR(sequence.description, 1, 400)
                    END AS sequence_description,
               SUBSTR(genbank.genbank_accession, 1, 20) AS genbank_accession,
               SUBSTR(db.database_version, 1, 30) AS database_version, db.database_name,
               SUBSTR(sequence.chromosome, 1, 20) AS chromosome,
               sequence.external_database_release_id, sequence.sequence_ontology_id,
               sequence.chromosome_order_num, so.source_id as so_id, so.name as sequence_type,
               coalesce(virtualization.is_top_level, 1) as is_top_level,
               sequence.na_sequence_id, organism.genome_source,
               organism.name_for_filenames, coalesce(msa.has_msa, 0) as has_msa
        FROM sres.Taxon LEFT JOIN apidb.Organism ON taxon.taxon_id = organism.taxon_id,
             sres.OntologyTerm so,
             ( SELECT na_sequence_id, source_id, length, chromosome, chromosome_order_num, taxon_id, description,
                      a_count, c_count, g_count, t_count, external_database_release_id, sequence_ontology_id
               FROM dots.ExternalNaSequence
              UNION
               SELECT na_sequence_id, source_id, length, chromosome, chromosome_order_num, taxon_id, description,
                      a_count, c_count, g_count, t_count, external_database_release_id, sequence_ontology_id
               FROM dots.VirtualSequence
             ) sequence
             LEFT JOIN
             (SELECT drns.na_sequence_id, max(dr.primary_identifier) AS genbank_accession
              FROM dots.dbrefNaSequence drns, sres.DbRef dr,
                   sres.ExternalDatabaseRelease gb_edr, sres.ExternalDatabase gb_ed
              WHERE drns.db_ref_id = dr.db_ref_id
                AND dr.external_database_release_id
                    = gb_edr.external_database_release_id
                AND gb_edr.external_database_id = gb_ed.external_database_id
                AND gb_ed.name = 'GenBank'
              GROUP BY drns.na_sequence_id
             ) genbank ON sequence.na_sequence_id = genbank.na_sequence_id
             LEFT JOIN
             (SELECT edr.external_database_release_id,
                     edr.version AS database_version, ed.name AS database_name
              FROM sres.ExternalDatabase ed, sres.ExternalDatabaseRelease edr
              WHERE edr.external_database_id = ed.external_database_id
             ) db ON sequence.external_database_release_id = db.external_database_release_id
             LEFT JOIN
             (SELECT distinct piece_na_sequence_id, 0 as is_top_level
              FROM &prefixSequencePieceClosure
             ) virtualization ON  sequence.na_sequence_id = virtualization.piece_na_sequence_id
             LEFT JOIN
             (SELECT a_na_sequence_id as na_sequence_id, 1 as has_msa
              FROM apidb.Synteny syn
              GROUP BY a_na_sequence_id
             ) msa ON sequence.na_sequence_id = msa.na_sequence_id
             LEFT JOIN
             (SELECT taxon_id, max(name) as name
              FROM sres.TaxonName
              WHERE name_class = 'scientific name'
              GROUP BY taxon_id
             ) tn ON sequence.taxon_id = tn.taxon_id
        WHERE
          sequence.taxon_id = taxon.taxon_id
          AND sequence.sequence_ontology_id = so.ontology_term_id
          AND (sequence.taxon_id::varchar = '&filterValue' OR length('&filterValue') = 0)
          AND so.name IN ('random_sequence', 'chromosome', 'contig', 'supercontig','mitochondrial_chromosome','plastid_sequence','cloned_genomic','apicoplast_chromosome','maxicircle')
        ORDER BY organism, source_id
      ]]>
    </sql>
    <sql>
      <![CDATA[
        create unique index pk_SeqAttr_&1 ON &prefixGenomicSeqAttributes&1 (lower(source_id), project_id)
      ]]>
    </sql>
    <sql>
      <![CDATA[
        create unique index SeqAttr_source_id&1 ON &prefixGenomicSeqAttributes&1 (source_id)
      ]]>
    </sql>
    <sql>
      <![CDATA[
        create unique index SeqAttr_naseqid&1 ON &prefixGenomicSeqAttributes&1 (na_sequence_id)
      ]]>
    </sql>
    <sql>
      <![CDATA[
        create unique index SeqAttr_taxsrc_id&1 ON &prefixGenomicSeqAttributes&1 (taxon_id, source_id)
      ]]>
    </sql>
  </tuningTable>

<!--  <tuningTable name="DatasetPresenter" alwaysUpdate="true">-->
  <tuningTable name="DatasetPresenter">
    <comment> Data for a dataset. Used widely in the model, and by GBrowse.</comment>
    <internalDependency name="GenomicSeqAttributes"/>
    <externalDependency name="core.ProjectInfo"/>
    <externalDependency name="sres.ExternalDatabase"/>
    <ancillaryTable name="DatasetContact"/>
    <ancillaryTable name="DatasetProperty"/>
    <ancillaryTable name="DatasetHyperLink"/>
    <ancillaryTable name="DatasetPublication"/>
    <ancillaryTable name="DatasetModelRef"/>
    <ancillaryTable name="DatasetNameTaxon"/>
    <ancillaryTable name="DatasetHistory"/>
    <program commandLine="buildDatasetPresentersTT"/>
  </tuningTable>

  <tuningTable name="AssociatedDataset" alwaysUpdate="true">
    <comment>datasets shared with other projects</comment>
    <internalDependency name="DatasetPresenter"/>
    <program commandLine="buildAssociatedDatasetTT"/>
  </tuningTable>

  <tuningTable name="EupathBuildDates" alwaysUpdate="true">
    <internalDependency name="GenomicSeqAttributes"/>
    <program commandLine="buildEupathBuildDatesTT"/>
  </tuningTable>

  <tuningTable name="DatasetDetail" alwaysUpdate="true">
    <comment> Stores text associated with each dataset. Used by dataset queries.
      </comment>
    <internalDependency name="DatasetPresenter"/>
    <sql>
      <![CDATA[
        CREATE TABLE DatasetDetail&1 AS
        SELECT dataset_presenter_id,
          name || ' ' || category || ' ' || usage || ' ' ||
          caveat || ' ' || acknowledgement || ' ' || type || ' ' || subtype
          ||' ' || summary || ' ' || description || ' ' || contact || ' ' ||
          institution || ' ' || pubmed_id || ' ' || citation as search_string
        FROM (
          SELECT
            sub.dataset_presenter_id as dataset_presenter_id,
            sub.name as name,
            sub.category as category,
            sub.usage as usage,
            sub.caveat as caveat,
            sub.acknowledgement as acknowledgement,
            sub.type as type,
            sub.subtype as subtype,
            sub.contact,
            sub.institution,
            sub.pubmed_id,
            sub.citation,
            dp.summary,
            dp.description
          FROM DatasetPresenter dp,
          (
            SELECT DISTINCT
              dp.dataset_presenter_id as dataset_presenter_id,
              dp.display_name as name,
              dp.display_category as category,
              dp.usage as usage,
              dp.caveat as caveat,
              dp.acknowledgement as acknowledgement,
              dp.type as type,
              dp.subtype as subtype,
              dc.name as contact,
              dc.affiliation as institution,
              string_agg(dpub.pmid, ' ' ORDER BY dpub.pmid) as pubmed_id,
              -- CHECK AND FIX - regexp_like ISSUE
              --string_agg(CASE WHEN REGEXP_LIKE(dpub.citation, '[[:digit:]]{4};')
              --             THEN substr(citation, 1, regexp_instr(citation, '[[:digit:]]{4};' ) - 1)
              --             ELSE dpub.citation
              --        END , '  ' ORDER BY dpub.citation) as citation
             string_agg(dpub.citation, ' '  ORDER BY dpub.citation) as citation
            FROM DatasetPresenter dp, DatasetContact dc,
                 DatasetPublication dpub
            WHERE dp.dataset_presenter_id = dc.dataset_presenter_id
              AND dp.dataset_presenter_id = dpub.dataset_presenter_id
              AND dc.is_primary_contact = true
            GROUP by dp.dataset_presenter_id, dp.display_name,dp.display_category,
                     dp.usage,dp.caveat,dp.acknowledgement,dp.type,dp.subtype,dc.name,
                     dc.affiliation
          ) sub
          WHERE dp.dataset_presenter_id = sub.dataset_presenter_id
        ) t
      ]]>
    </sql>
<!--    <sql>-->
<!--      <![CDATA[-->
<!--          CREATE INDEX DATASET_DETAIL_IDX&1 ON DATASETDETAIL&1 (search_string)-->
<!--          INDEXTYPE IS CTXSYS.CONTEXT-->
<!--      ]]>-->
<!--    </sql>-->
  </tuningTable>

  <tuningTable name="ExternalDbDatasetPresenter">
    <comment>
      A materialization of the oft-computed join of sres.externalDatabaseRelease,
      sres.externalDatabase, and DatasetPresenter.
    </comment>
    <internalDependency name="DatasetPresenter"/>
    <externalDependency name="sres.ExternalDatabase"/>
    <externalDependency name="sres.ExternalDatabaseRelease"/>
    <sql>
      <![CDATA[
        CREATE TABLE ExternalDbDatasetPresenter&1 AS
        SELECT ed.external_database_id, ed.name AS external_database_name,
               edr.external_database_release_id, SUBSTR(edr.version, 1, 40) AS external_database_version,
               dsp.dataset_presenter_id, dsp.name AS dataset_presenter_name,
               dsp.display_name AS dataset_presenter_display_name
        FROM sres.externalDatabaseRelease edr,  sres.externalDatabase ed, DatasetPresenter dsp
        WHERE ed.external_database_id = edr.external_database_id
          AND (ed.name = dsp.name
               OR ed.name LIKE dsp.dataset_name_pattern)
        ORDER BY ed.name
      ]]>
    </sql>
    <sql>
      <![CDATA[
        create index edd_rlsidix&1
          on ExternalDbDatasetPresenter&1
            (external_database_release_id, external_database_id, external_database_name,
             dataset_presenter_id, dataset_presenter_name, dataset_presenter_display_name)

      ]]>
    </sql>
    <sql>
      <![CDATA[
        create index edd_dsidix&1
          on ExternalDbDatasetPresenter&1
            (dataset_presenter_id, external_database_id, external_database_release_id, 
             external_database_name, dataset_presenter_name, dataset_presenter_display_name)

      ]]>
    </sql>
    <sql>
      <![CDATA[
        create index edd_dsnameix&1
          on ExternalDbDatasetPresenter&1
            (dataset_presenter_name, dataset_presenter_id, external_database_id, 
             external_database_release_id, external_database_name, external_database_version, 
             dataset_presenter_display_name)

      ]]>
    </sql>
  </tuningTable>

<!-- COMMENT FOR NOW, as no InferredParam table; FIX later 
  <tuningTable name="TaxonRelativeAbundance">
    <comment>for the sample record taxon relative abundance table
     </comment>
    <internalDependency name="InferredParams"/>
    <externalDependency name="results.LineageAbundance"/>
    <externalDependency name="results.LineageTaxon"/>
    <externalDependency name="sres.Taxon"/>
    <sql>
      <![CDATA[
        CREATE TABLE TaxonRelativeAbundance&1
            (name, protocol_app_node_id, relative_abundance,
             absolute_abundance, ncbi_tax_id, lineage, kingdom, phylum, class,
             rank_order, family, genus, species
             )
        AS SELECT
           sp.name,
           la.protocol_app_node_id,
           la.relative_abundance,
           la.raw_count as absolute_abundance,
           st.ncbi_tax_id,
           la.lineage,
           cast(regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\1') as VARCHAR(20)) as kingdom,
           cast(regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\2') as VARCHAR(50)) as phylum,
           cast(regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\3') as VARCHAR(50)) as class,
           cast(regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\4') as VARCHAR(50)) as rank_order,
           cast(regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\5') as VARCHAR(100)) as family,
           cast(regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\6') as VARCHAR(100)) as genus,
           cast(regexp_replace(la.lineage, '^([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?([^;]+)?;?$', '\7') as VARCHAR(100)) as species
        FROM
          apidbtuning.SampleProcess sp,
          results.LineageAbundance la
          LEFT JOIN results.LineageTaxon lt ON la.lineage = lt.lineage
          LEFT JOIN sres.Taxon st ON lt.taxon_id = st.taxon_id
        WHERE
          la.protocol_app_node_id = sp.output_pan_id
      ]]>
    </sql>
    <sql>
      <![CDATA[
        CREATE INDEX taxRelAbund_pk&1
          ON TaxonRelativeAbundance&1 (name, lineage)

      ]]>
    </sql>
  </tuningTable>
-->

  <tuningTable name="EdaGeneGraph" alwaysUpdate="true">
    <comment>EDA Graph Config for Gene pages
      </comment>
    <program commandLine="buildEdaGeneGraphTT"/>
  </tuningTable>




<!-- COPIED from studyTuningManager.xml -->

   <!-- renamed from ProtocolAppNodeIO -->
  <tuningTable name="PANIO" prefixEnabled="true">
   <comment>ALL inputs and outputs</comment>
    <internalDependency name="PANExtDbRls"/>
    <externalDependency name="study.ProtocolApp"/>
    <externalDependency name="study.Input"/>
    <externalDependency name="study.Output"/>
    <externalDependency name="sres.OntologyTerm"/>
    <externalDependency name="study.ProtocolAppNode"/>
    <sql>
      <![CDATA[
        CREATE TABLE &prefixPANIO&1 AS
        SELECT DISTINCT io.*
        FROM (
          SELECT i.protocol_app_node_id input_pan_id, pa.protocol_app_id,
                 o.protocol_app_node_id output_pan_id,
                 in_type.source_id as input_pan_type_source_id,
                 --in_type.name as input_pan_type,
                 in_type.ontology_term_id as input_pan_type_id,
                 out_type.source_id as output_pan_type_source_id,
                 --out_type.name as output_pan_type,
                 out_type.ontology_term_id as output_pan_type_id
          FROM study.ProtocolApp pa, study.Input i, study.Output o,
               study.ProtocolAppNode in_pan LEFT JOIN sres.OntologyTerm in_type ON in_pan.type_id = in_type.ontology_term_id,
               study.ProtocolAppNode out_pan LEFT JOIN sres.OntologyTerm out_type ON out_pan.type_id = out_type.ontology_term_id
          WHERE i.protocol_app_id = pa.protocol_app_id
            AND o.protocol_app_id = pa.protocol_app_id
            AND i.protocol_app_node_id = in_pan.protocol_app_node_id
            AND o.protocol_app_node_id = out_pan.protocol_app_node_id
        ) io, &prefixpanextdbrls panExtDbRls
        WHERE io.input_pan_id = panExtDbRls.pan_id -- the input and outputs will have same dataset in prefix enabled mode only
          AND (panExtDbRls.dataset_name = '&filterValue' or length('&filterValue') = 0)
        ORDER BY io.input_pan_id, io.output_pan_id
      ]]>
    </sql>
    <sql>
      <![CDATA[
        create index &prefixpainio2_iix&1 on &prefixPANIO&1
               (input_pan_id, output_pan_id, protocol_app_id, input_pan_type_source_id, output_pan_type_source_id)

      ]]>
    </sql>
    <sql>
      <![CDATA[
        create index &prefixpainio2_oix&1 on &prefixPANIO&1
               (output_pan_id, input_pan_id, protocol_app_id, input_pan_type_source_id, output_pan_type_source_id)

      ]]>
    </sql>
    <sql>
      <![CDATA[
        create index &prefixpainio2_otypeix&1 on &prefixPANIO&1
               (output_pan_type_source_id, input_pan_type_source_id, output_pan_id, input_pan_id, protocol_app_id)

      ]]>
    </sql>
    <sql>
      <![CDATA[
        create index &prefixpainio2_itypeix&1 on &prefixPANIO&1
               (input_pan_type_source_id, output_pan_type_source_id, input_pan_id, output_pan_id, protocol_app_id)

      ]]>
    </sql>
  </tuningTable>

   <!-- renamed from PANExternalDatabaseRelease -->
  <tuningTable name="PANExtDbRls" prefixEnabled="true">
   <comment>ALL inputs and outputs</comment>
    <externalDependency name="study.NodeSet"/>
    <externalDependency name="study.NodeNodeSet"/>
    <externalDependency name="study.ProtocolAppNode"/>
    <externalDependency name="sres.ExternalDatabase"/>
    <externalDependency name="sres.ExternalDatabaseRelease"/>
    <sql>
      <![CDATA[
        CREATE TABLE &prefixPANExtDbRls&1 AS
        SELECT distinct protocol_app_node_id as pan_id, external_database_release_id, name as dataset_name
        FROM (
          SELECT
            sl.protocol_app_node_id
          , s.external_database_release_id
          , d.name
          FROM
            study.nodeSet s
          , study.nodeNodeSet sl
          , sres.externaldatabaserelease r
          , sres.externaldatabase d
          WHERE
            s.external_database_release_id = r.external_database_release_id
            and r.external_database_id = d.external_database_id
            and s.node_set_id = sl.node_set_id
            and s.external_database_release_id is not null
          UNION
          SELECT pan.protocol_app_node_id
          , pan.external_database_release_id
          , d.name
          FROM study.protocolappnode pan
          , sres.externaldatabaserelease r
          , sres.externaldatabase d
          WHERE
            pan.external_database_release_id = r.external_database_release_id
            and r.external_database_id = d.external_database_id
            and pan.external_database_release_id is not null
        ) t
        WHERE (name = '&filterValue' or length('&filterValue') = 0)
        ORDER BY external_database_release_id, protocol_app_node_id
      ]]>
    </sql>
  </tuningTable>

  <tuningTable name="PANResults" prefixEnabled="true">
    <comment>Table of protocol app node ids and the name of the result table where they are referenced
    </comment>
    <internalDependency name="PANExtDbRls"/>
    <externalDependency name="apidb.ChrCopyNumber"/>
    <externalDependency name="apidb.CrisprPhenotype"/>
    <externalDependency name="apidb.GeneCopyNumber"/>
    <externalDependency name="apidb.IntronJunction"/>
    <externalDependency name="apidb.MassSpecSummary"/>
    <externalDependency name="apidb.RflpGenotype"/>
    <externalDependency name="apidb.RflpGenotypeNumber"/>
    <externalDependency name="results.CompoundMassSpec"/>
    <externalDependency name="results.EditingEvent"/>
    <externalDependency name="results.FamilyDiffResult"/>
    <externalDependency name="results.FamilyExpression"/>
    <externalDependency name="results.GeneDiffResult"/>
    <externalDependency name="results.GeneExpression"/>
    <externalDependency name="results.GeneSimilarity"/>
    <externalDependency name="results.LineageAbundance"/>
    <externalDependency name="results.NaFeatureDiffResult"/>
    <externalDependency name="results.NaFeatureExpression"/>
    <externalDependency name="results.NaFeatureHostResponse"/>
    <externalDependency name="results.ReporterDiffResult"/>
    <externalDependency name="results.ReporterExpression"/>
    <externalDependency name="results.ReporterIntensity"/>
    <externalDependency name="results.RnaDiffResult"/>
    <externalDependency name="results.RnaExpression"/>
    <externalDependency name="results.SegmentDiffResult"/>
    <externalDependency name="results.SegmentResult"/>
    <externalDependency name="results.SeqVariation"/>
    <externalDependency name="study.ProtocolAppNode"/>
    <sql>
      <![CDATA[
        CREATE TABLE &prefixPANResults&1 AS
        SELECT DISTINCT r.*
        FROM (
          SELECT protocol_app_node_id as pan_id, 'Results::NAFeatureDiffResult' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.NAFeatureDiffResult)
        UNION
          SELECT protocol_app_node_id, 'Results::ReporterIntensity' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.ReporterIntensity)
        UNION
          SELECT protocol_app_node_id, 'Results::SegmentResult' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.SegmentResult)
        UNION
          SELECT protocol_app_node_id, 'Results::CompoundMassSpec' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.CompoundMassSpec)
        UNION
          SELECT protocol_app_node_id, 'Results::NaFeatureHostResponse' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.NaFeatureHostResponse)
        UNION
          SELECT protocol_app_node_id, 'ApiDB::ChrCopyNumber' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM ApiDB.ChrCopyNumber)
        UNION
          SELECT protocol_app_node_id, 'ApiDB::GeneCopyNumber' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM ApiDB.GeneCopyNumber)
        UNION
          SELECT protocol_app_node_id, 'Results::NAFeatureExpression' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.NAFeatureExpression)
        UNION
          SELECT protocol_app_node_id, 'Results::EditingEvent' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.EditingEvent)
        UNION
          SELECT protocol_app_node_id, 'Results::FamilyDiffResult' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.FamilyDiffResult)
        UNION
          SELECT protocol_app_node_id, 'Results::FamilyExpression' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.FamilyExpression)
        UNION
          SELECT protocol_app_node_id, 'Results::GeneDiffResult' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.GeneDiffResult)
        UNION
          SELECT protocol_app_node_id, 'Results::GeneExpression' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.GeneExpression)
        UNION
          SELECT protocol_app_node_id, 'Results::GeneSimilarity' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.GeneSimilarity)
        UNION
          SELECT protocol_app_node_id, 'Results::ReporterDiffResult' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.ReporterDiffResult)
        UNION
          SELECT protocol_app_node_id, 'Results::ReporterExpression' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.ReporterExpression)
        UNION
          SELECT protocol_app_node_id, 'Results::RnaDiffResult' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.RnaDiffResult)
        UNION
          SELECT protocol_app_node_id, 'Results::RnaExpression' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.RnaExpression)
        UNION
          SELECT protocol_app_node_id, 'Results::LineageAbundance' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.LineageAbundance)
        UNION
          SELECT protocol_app_node_id, 'Results::SegmentDiffResult' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.SegmentDiffResult)
        UNION
          SELECT protocol_app_node_id, 'Results::SeqVariation' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM Results.SeqVariation)
        UNION
          SELECT protocol_app_node_id, 'ApiDB::SequenceVariation' as result_table FROM study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM study.ProtocolAppNode WHERE name like '% (Sequence Variation)')
        UNION
          SELECT protocol_app_node_id, 'ApiDB::MassSpecSummary' as result_table from study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM apidb.MASSSPECSUMMARY)
        UNION
          SELECT protocol_app_node_id, 'ApiDB::IntronJunction' as result_table from study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM apidb.IntronJunction)
        UNION
          SELECT protocol_app_node_id, 'ApiDB::RflpGenotype' as result_table from study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM apidb.RflpGenotype)
        UNION
          SELECT protocol_app_node_id, 'ApiDB::RflpGenotypeNumber' as result_table from study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM apidb.RflpGenotypeNumber)
        UNION
          SELECT protocol_app_node_id, 'ApiDB::CrisprPhenotype' as result_table from study.ProtocolAppNode
          WHERE protocol_app_node_id in (select protocol_app_node_id FROM apidb.crisprphenotype)
        ) r, &prefixpanextdbrls panExtDbRls
        WHERE r.pan_id = panExtDbRls.pan_id
          AND (panExtDbRls.dataset_name = '&filterValue' or length('&filterValue') = 0)
      ]]>
    </sql>
  </tuningTable>

</tuningConfig>
