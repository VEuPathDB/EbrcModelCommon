#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use Getopt::Long qw(GetOptions);
use Data::Dumper;
use EbrcModelCommon::Model::tmUtils;
use LWP::Simple;
use JSON;

my ($help, $propfile, $instance, $schema, $suffix, $prefix, $filterValue, $debug);

Getopt::Long::Configure("pass_through");
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "prefix=s" => \$prefix,
           "filterValue=s" => \$filterValue,
           "debug!" => \$debug,
           "help|h" => \$help,
          );

usage() if ($help);

die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

# create table
$dbh->do(<<SQL) or die "creating table";
   create table AssociatedDataset$suffix (
      local_dataset_id      varchar(15),
      local_project         varchar(20),
      pubmed_id             varchar(60),
      associated_dataset_id varchar(15),
      project               varchar(20),
      webapp_name           varchar(20),
      display_name          varchar(200)
   )
SQL

my %projects = (
#   'abbreviation' => 'project',
    'ameb'         => 'AmoebaDB',
    'cryp'         => 'CryptoDB',
    'giar'         => 'GiardiaDB',
    'host'         => 'HostDB',
    'micr'         => 'MicrosporidiaDB',
    'piro'         => 'PiroplasmaDB',
    'plas'         => 'PlasmoDB',
    'toxo'         => 'ToxoDB',
    'tvag'         => 'TrichDB',
    'tryp'         => 'TriTrypDB',
    'fung'         => 'FungiDB',
    'vect'         => 'VectorBase',
    'clin'         => 'ClinEpiDB',
    'mbio'         => 'MicrobiomeDB',
);

my %webapps = (
#   'abbreviation' => 'webapp',
    'ameb'         => 'amoeba',
    'cryp'         => 'cryptodb',
    'giar'         => 'giardiadb',
    'host'         => 'hostdb',
    'micr'         => 'micro',
    'piro'         => 'piro',
    'plas'         => 'plasmo',
    'toxo'         => 'toxo',
    'tvag'         => 'trichdb',
    'tryp'         => 'tritrypdb',
    'fung'         => 'fungidb',
    'vect'         => 'vectorbase',
    'clin'         => 'ce',
    'mbio'         => 'mbio',
    'eda-'          => {'clin', 1, 'mbio', 1, 'vect', 1},
);


# prepare insert
my $insertStmt = $dbh->prepare(<<SQL);
   insert into AssociatedDataset$suffix
   (local_dataset_id, pubmed_id, associated_dataset_id, project, webapp_name, display_name, local_project)
   values (?, ?, ?, ?, ?, ?, ?)
SQL

# get local datasets and PubMed IDs
my $stmt = $dbh->prepare(<<SQL) or print STDERR $dbh->errstr;
     select dpres.project_id, dpres.dataset_presenter_id, dpub.pmid, dpres.display_name
     from DatasetPresenter dpres, DatasetPublication dpub
     where dpres.dataset_presenter_id = dpub.dataset_presenter_id
       and dpub.pmid is not null
     order by pmid, dataset_presenter_id
SQL

$stmt->execute();

my (@projectId, @localDatasetId, @localPmid, @displayName);
my $localDatasets = 0;

while ( ($projectId[$localDatasets], $localDatasetId[$localDatasets], $localPmid[$localDatasets], $displayName[$localDatasets])
	= $stmt->fetchrow_array()) {
  $localDatasets++
}
$stmt->finish();
print "fetched $localDatasets local datasets\n";

# use instance name to orient ourselves
my $instanceProject = substr $instance, 0, 4;

my $host;
if ($instance =~ /^rm/ || $instance =~ /-/) {
  $host = "qa";
} else {
  $host = "www";
}

my $insertCount = 0;

my $webappProjects = $webapps{$instanceProject};

unless(ref($webappProjects) eq 'HASH'){ # multiple projects in one instance (EDA)
  $webappProjects = { $webappProjects, 1 }; # single project instance
}

foreach my $localProject (keys %$webappProjects){
  # associations within the local project
  if ($webapps{$localProject}) {
  
    printf("checking for associations within project %s\n", $projects{$localProject});
    for (my $iLocal = 0; $iLocal < $localDatasets; $iLocal++) {
      next unless ( $projects{$localProject} eq $projectId[$iLocal] );
      for (my $iAssociated = 0; $iAssociated < $localDatasets; $iAssociated++) {
        next unless (($iLocal != $iAssociated) && # not self
          ($projectId[$iLocal] eq $projectId[$iAssociated]) && # same project
          ($localPmid[$iLocal] eq $localPmid[$iAssociated]) && # same pubmed id
          ($localDatasetId[$iLocal] ne $localDatasetId[$iAssociated]) # impossible, but safe
        );

        $insertStmt->execute($localDatasetId[$iLocal], $localPmid[$iLocal], $localDatasetId[$iAssociated],
          $projects{$localProject}, $webapps{$localProject}, $displayName[$iAssociated], $projectId[$iLocal])
          or die "inserting intramural record for local dataset \"" . $localDatasetId[$iLocal] . "\"";
        $insertCount++;
      }
    }
  }
}
  
  print "inserted $insertCount intramural records.\n";
  
# get dataset records from all other projects
foreach my $projectKey (keys %projects) {

  next if $webappProjects->{$projectKey};

  my $url = "https://$host.$projects{$projectKey}.org/$webapps{$projectKey}/service/record-types/dataset/searches/AllDatasets/reports/standard?reportConfig=%7B%22attributes%22%3A%5B%22primary_key%22%5D%2C%22tables%22%3A%5B%22Publications%22%5D%2C%22attributeFormat%22%3A%22text%22%7D";

  # print "Web service request url:\n$url\n";
  my $datasetsJson = getData($url);

  # print Dumper $datasetsJson->{records}[0];

  foreach my $record (@{$datasetsJson->{records}}) {

    my $displayName = $record->{displayName};
    # print Dumper $record;

    foreach my $pubrec (@{$record->{tables}->{Publications}}) {

      # print "dataset: " . $pubrec->{dataset_id} . "; pmid: " . $pubrec->{pmid} . "\n";

      for (my $i=0; $i<$localDatasets; $i++) {
	if ($pubrec->{pmid} eq $localPmid[$i] and $localDatasetId[$i] ne $pubrec->{dataset_id}) {
	  $insertStmt->execute($localDatasetId[$i], $localPmid[$i], $pubrec->{dataset_id},
			       $projects{$projectKey}, $webapps{$projectKey}, $displayName, $projectId[$i])
	    or die "inserting record for local dataset \"" . $localDatasetId[$i] . "\"";
	  $insertCount++;
	}
      }
    }
  }
}
$dbh->commit();

print "inserted $insertCount records.\n";

# create index
$dbh->do(<<SQL) or die "creating index";
   create index ldsix$suffix
      on AssociatedDataset$suffix (local_dataset_id, pubmed_id)
SQL

$dbh->disconnect();

sub usage {
  my $e = shift;
  if($e) {
    print STDERR $e . "\n";
  }
  print STDERR "
Build a table of associations between datasets in the current instance and in other projects using shared PubMed IDs

usage:  buildAssociatedDatasetsTT -propfile prop_file -instance instance -schema schema -suffix suffix  [-debug] [-help]
";
  exit;
}

sub getData {
  my ($url) = @_;


  my $json = get $url;
  die "Couldn't get $url" unless defined $json;

  if ($json =~ /\*\*\*\*\*\*\* ERROR \*\*\*\*\*\*\*/) {
    print "error in response at URL $url\n";
    die "error in JSON";
  }

  return decode_json ($json);
}

1;

