#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use EbrcModelCommon::Model::tmUtils;

usage() unless scalar(@ARGV) >= 4;

my ($instance, $suffix, $propfile, $mode, $debug) = @ARGV;

usage() unless ($mode eq '-create' || $mode eq '-drop' || $mode eq '-dropConstraints');

my $schema = "ApidbTuning";

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

$|=1;

if ($mode eq "-dropConstraints") {
  dropConstraints($dbh, $schema, $suffix); # (also drops sequences)
} elsif ($mode eq "-drop") {
  dropConstraints($dbh, $schema, $suffix);
  dropTables($dbh, $schema, $suffix);
} else {
  createTables($dbh, $schema, $suffix);
}

$dbh->commit() or print STDERR $dbh->errstr;

sub createTables {
  my ($dbh, $schema, $suffix) = @_;

  my $sql = "
      create table $schema.DatasetPresenter$suffix (
        dataset_presenter_id         varchar(15),
        name                         varchar(200),
        project_id                   varchar(40),
        dataset_name_pattern         varchar(200),
        display_name                 varchar(200),
        short_display_name           varchar(200),
        short_attribution            varchar(200),
        summary                      text,
        protocol                     varchar(4000),
        description                  text,
        usage                        varchar(4000),
        caveat                       varchar(4000),
        acknowledgement              varchar(4000),
        release_policy               varchar(4000),
        display_category             varchar(60),
        type                         varchar(100),
        subtype                      varchar(100),
        category                     varchar(100),
        is_species_scope             numeric(1),
        build_number_introduced      numeric(5),
        dataset_sha1_digest          varchar(50),
        constraint DatasetPresenter${suffix}_pk primary key (dataset_presenter_id)
      )";
  runSql($dbh, $sql, 1);

  $sql = "create sequence $schema.DatasetPresenter${suffix}_sq";
  runSql($dbh, $sql, 1);

  ###############################################

  $sql = "
      create table $schema.DatasetContact$suffix (
        dataset_contact_id           numeric(12),
        dataset_presenter_id         varchar(15),
        is_primary_contact           boolean,
        name                         varchar(255),
        email                        varchar(255),
        affiliation                  varchar(255),
        city                         varchar(255),
        state                        varchar(255),
        country                      varchar(255),
        address                      varchar(255),
        zip                          varchar(25),
        constraint DatasetContact${suffix}_pk primary key (dataset_contact_id)
      )";
  runSql($dbh, $sql, 1);

  $sql = "create sequence $schema.DatasetContact${suffix}_sq";
  runSql($dbh, $sql, 1);

  ###############################################

  $sql = "
      create table $schema.DatasetProperty$suffix (
        dataset_property_id   numeric(12),
        dataset_presenter_id  varchar(15),
        property              varchar(255),
        value                 varchar(4000),
        constraint DatasetProperty${suffix}_pk primary key (dataset_property_id)
      )";
  runSql($dbh, $sql, 1);

  $sql = "create sequence $schema.DatasetProperty${suffix}_sq";
  runSql($dbh, $sql, 1);


  #######################################################

  $sql = "
      create table $schema.DatasetHyperLink$suffix (
        dataset_link_id                  numeric(12),
        dataset_presenter_id             varchar(15),
        text                             varchar(4000),
        description                      varchar(4000),
        url                              varchar(2000),
        isPublication                    varchar(1),
        constraint DatasetHyperLink${suffix}_pk primary key (dataset_link_id)
      )";
  runSql($dbh, $sql, 1);


  $sql = "create sequence $schema.DatasetHyperLink${suffix}_sq";
  runSql($dbh, $sql, 1);


  #######################################################

  $sql = "
      create table $schema.DatasetPublication$suffix (
        dataset_publication_id       numeric(12),
        dataset_presenter_id         varchar(15),
        pmid                         varchar(60),
        citation                     varchar(4000),
        constraint DatasetPublication${suffix}_pk primary key (dataset_publication_id)
     )";
  runSql($dbh, $sql, 1);


  $sql = "create sequence $schema.DatasetPublication${suffix}_sq";
  runSql($dbh, $sql, 1);


  #######################################################

  $sql = "
      create table $schema.DatasetNameTaxon$suffix (
        dataset_taxon_id          numeric(12),
        dataset_presenter_id      varchar(15),
        taxon_id                  numeric(12),
        name                      varchar(200),
        constraint DatasetNameTaxon${suffix}_pk primary key (dataset_taxon_id)
      )";
  runSql($dbh, $sql, 1);

  $sql = "create sequence $schema.DatasetNameTaxon${suffix}_sq";
  runSql($dbh, $sql, 1);

  $sql = "create index dsntix_${suffix}
            on ${schema}.DatasetNameTaxon${suffix} (name, dataset_presenter_id)
         ";
  runSql($dbh, $sql, 1);

  #######################################################

  $sql = "
      create table $schema.DatasetModelRef$suffix (
        dataset_model_ref_id         numeric(12),
        dataset_presenter_id         varchar(15),
        record_type                  varchar(100),
        target_type                  varchar(20),
        target_name                  varchar(300),
        constraint DatasetModelRef${suffix}_pk primary key (dataset_model_ref_id)
      )";
  runSql($dbh, $sql, 1);

  $sql = "create sequence $schema.DatasetModelRef${suffix}_sq";
  runSql($dbh, $sql, 1);

  $sql = "create index dsmrix_${suffix}
            on ${schema}.DatasetModelRef${suffix} (dataset_presenter_id)
          ";
  runSql($dbh, $sql, 1);

  #######################################################

  $sql = "
      create table $schema.DatasetHistory$suffix (
        dataset_history_id         numeric(12),
        dataset_presenter_id       varchar(15),
        build_number               numeric,
        note                       varchar(1000),
        genome_source              varchar(300),
        genome_version             varchar(40),
        annotation_source          varchar(300),
        annotation_version         varchar(40),
        functional_annotation_source       varchar(300),
        functional_annotation_version      varchar(20),
        constraint DatasetHistory${suffix}_pk primary key (dataset_history_id)
      )";
  runSql($dbh, $sql, 1);

  $sql = "create sequence $schema.DatasetHistory${suffix}_sq";
  runSql($dbh, $sql, 1);

}

sub dropTables {
  my ($dbh, $schema, $suffix) = @_;

  foreach my $nm ('Presenter', 'Contact', 'HyperLink', 'Publication', 'NameTaxon', 'ModelRef', 'History', 'Property') {
    my $sql = "drop table $schema.Dataset$nm${suffix}";
    runSql($dbh, $sql, 0);

  }
}

sub dropConstraints {
  my ($dbh, $schema, $suffix) = @_;

    my $sql = "drop sequence $schema.DatasetPresenter${suffix}_sq";
    runSql($dbh, $sql, 0);

  foreach my $nm ('Contact', 'HyperLink', 'Publication', 'NameTaxon', 'ModelRef', 'History') {
    my $sql = "drop sequence $schema.Dataset$nm${suffix}_sq";
    runSql($dbh, $sql, 0);

    $sql = "alter table $schema.Dataset$nm${suffix} drop constraint Dataset$nm${suffix}_fk";
  # runSql($dbh, $sql, 0);
  }
}

sub runSql {
  my ($dbh, $sql, $die) = @_;
  print STDERR "\n$sql\n" if $debug;
  my $status = $dbh->do($sql);
  die "Failed running sql: \n$sql\n" if $die && !$status;
}

sub usage {
  die "
Create the DatasetPresenter schema (used by the tuning manager).

Usage:  createDatasetPresenterSchema instance suffix propsXmlFile mode [-debug]

Where:
  instance:       the name of the instance to create tables in

  suffix:         the name of the suffix to append on the tables, etc, created.
                  This is typically a number supplied by the tuning manager

  propsXmlFile:   an XML file compatible with tuning manager property XML format.
                  Required properties are:  password and schema.  (See tuningManager usage.)

  mode:           -create|-drop|-dropConstraints.  The last of these drops constraints and sequences.
                  We do this after the tables are populated because they are no longer needed and
                  this simplifies the tuning manager.
";
}
